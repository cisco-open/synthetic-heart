# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import syntest_pb2 as syntest__pb2


class SynTestPluginStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialise = channel.unary_unary(
                '/proto.syntest.SynTestPlugin/Initialise',
                request_serializer=syntest__pb2.SynTestConfig.SerializeToString,
                response_deserializer=syntest__pb2.Empty.FromString,
                )
        self.PerformTest = channel.unary_unary(
                '/proto.syntest.SynTestPlugin/PerformTest',
                request_serializer=syntest__pb2.Trigger.SerializeToString,
                response_deserializer=syntest__pb2.TestResult.FromString,
                )
        self.Finish = channel.unary_unary(
                '/proto.syntest.SynTestPlugin/Finish',
                request_serializer=syntest__pb2.Empty.SerializeToString,
                response_deserializer=syntest__pb2.Empty.FromString,
                )


class SynTestPluginServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initialise(self, request, context):
        """Called once at the start - for setup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformTest(self, request, context):
        """Called periodically or when another test finishes - as configured in the synthetic test config
        TestRun contains details from another test that the current test might depend on, otherwise empty
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Finish(self, request, context):
        """Called once before the plugin is killed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SynTestPluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialise': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialise,
                    request_deserializer=syntest__pb2.SynTestConfig.FromString,
                    response_serializer=syntest__pb2.Empty.SerializeToString,
            ),
            'PerformTest': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformTest,
                    request_deserializer=syntest__pb2.Trigger.FromString,
                    response_serializer=syntest__pb2.TestResult.SerializeToString,
            ),
            'Finish': grpc.unary_unary_rpc_method_handler(
                    servicer.Finish,
                    request_deserializer=syntest__pb2.Empty.FromString,
                    response_serializer=syntest__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.syntest.SynTestPlugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SynTestPlugin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initialise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.syntest.SynTestPlugin/Initialise',
            syntest__pb2.SynTestConfig.SerializeToString,
            syntest__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.syntest.SynTestPlugin/PerformTest',
            syntest__pb2.Trigger.SerializeToString,
            syntest__pb2.TestResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.syntest.SynTestPlugin/Finish',
            syntest__pb2.Empty.SerializeToString,
            syntest__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
