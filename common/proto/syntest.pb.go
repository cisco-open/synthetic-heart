// Code generated by protoc-gen-go. DO NOT EDIT.
// source: syntest.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// message to hold the config for a syntest plugin
type SynTestConfig struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PluginName           string            `protobuf:"bytes,2,opt,name=pluginName,proto3" json:"pluginName,omitempty"`
	DisplayName          string            `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description          string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Namespace            string            `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Importance           string            `protobuf:"bytes,6,opt,name=importance,proto3" json:"importance,omitempty"`
	Repeat               string            `protobuf:"bytes,7,opt,name=repeat,proto3" json:"repeat,omitempty"`
	AgentSelector        string            `protobuf:"bytes,8,opt,name=agentSelector,proto3" json:"agentSelector,omitempty"`
	DependsOn            []string          `protobuf:"bytes,9,rep,name=dependsOn,proto3" json:"dependsOn,omitempty"`
	Timeouts             *Timeouts         `protobuf:"bytes,10,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	PluginRestartPolicy  string            `protobuf:"bytes,11,opt,name=pluginRestartPolicy,proto3" json:"pluginRestartPolicy,omitempty"`
	LogWaitTime          string            `protobuf:"bytes,12,opt,name=logWaitTime,proto3" json:"logWaitTime,omitempty"`
	Config               string            `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	Etc                  map[string]string `protobuf:"bytes,14,rep,name=etc,proto3" json:"etc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SynTestConfig) Reset()         { *m = SynTestConfig{} }
func (m *SynTestConfig) String() string { return proto.CompactTextString(m) }
func (*SynTestConfig) ProtoMessage()    {}
func (*SynTestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7284b2a0aa7b4fec, []int{0}
}

func (m *SynTestConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SynTestConfig.Unmarshal(m, b)
}
func (m *SynTestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SynTestConfig.Marshal(b, m, deterministic)
}
func (m *SynTestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SynTestConfig.Merge(m, src)
}
func (m *SynTestConfig) XXX_Size() int {
	return xxx_messageInfo_SynTestConfig.Size(m)
}
func (m *SynTestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SynTestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SynTestConfig proto.InternalMessageInfo

func (m *SynTestConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SynTestConfig) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

func (m *SynTestConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SynTestConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SynTestConfig) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SynTestConfig) GetImportance() string {
	if m != nil {
		return m.Importance
	}
	return ""
}

func (m *SynTestConfig) GetRepeat() string {
	if m != nil {
		return m.Repeat
	}
	return ""
}

func (m *SynTestConfig) GetAgentSelector() string {
	if m != nil {
		return m.AgentSelector
	}
	return ""
}

func (m *SynTestConfig) GetDependsOn() []string {
	if m != nil {
		return m.DependsOn
	}
	return nil
}

func (m *SynTestConfig) GetTimeouts() *Timeouts {
	if m != nil {
		return m.Timeouts
	}
	return nil
}

func (m *SynTestConfig) GetPluginRestartPolicy() string {
	if m != nil {
		return m.PluginRestartPolicy
	}
	return ""
}

func (m *SynTestConfig) GetLogWaitTime() string {
	if m != nil {
		return m.LogWaitTime
	}
	return ""
}

func (m *SynTestConfig) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *SynTestConfig) GetEtc() map[string]string {
	if m != nil {
		return m.Etc
	}
	return nil
}

// message to hold info about the test run and how it was run
type TestRun struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AgentId              string            `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	StartTime            string            `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              string            `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	TestConfig           *SynTestConfig    `protobuf:"bytes,5,opt,name=testConfig,proto3" json:"testConfig,omitempty"`
	Trigger              *Trigger          `protobuf:"bytes,6,opt,name=trigger,proto3" json:"trigger,omitempty"`
	TestResult           *TestResult       `protobuf:"bytes,7,opt,name=testResult,proto3" json:"testResult,omitempty"`
	Details              map[string]string `protobuf:"bytes,8,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TestRun) Reset()         { *m = TestRun{} }
func (m *TestRun) String() string { return proto.CompactTextString(m) }
func (*TestRun) ProtoMessage()    {}
func (*TestRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_7284b2a0aa7b4fec, []int{1}
}

func (m *TestRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRun.Unmarshal(m, b)
}
func (m *TestRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRun.Marshal(b, m, deterministic)
}
func (m *TestRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRun.Merge(m, src)
}
func (m *TestRun) XXX_Size() int {
	return xxx_messageInfo_TestRun.Size(m)
}
func (m *TestRun) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRun.DiscardUnknown(m)
}

var xxx_messageInfo_TestRun proto.InternalMessageInfo

func (m *TestRun) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestRun) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *TestRun) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TestRun) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *TestRun) GetTestConfig() *SynTestConfig {
	if m != nil {
		return m.TestConfig
	}
	return nil
}

func (m *TestRun) GetTrigger() *Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *TestRun) GetTestResult() *TestResult {
	if m != nil {
		return m.TestResult
	}
	return nil
}

func (m *TestRun) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

// message to hold info about what triggered the test run
type Trigger struct {
	TriggerType          string   `protobuf:"bytes,1,opt,name=triggerType,proto3" json:"triggerType,omitempty"`
	TriggeringTest       *TestRun `protobuf:"bytes,2,opt,name=triggeringTest,proto3" json:"triggeringTest,omitempty"`
	Details              string   `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_7284b2a0aa7b4fec, []int{2}
}

func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

func (m *Trigger) GetTriggerType() string {
	if m != nil {
		return m.TriggerType
	}
	return ""
}

func (m *Trigger) GetTriggeringTest() *TestRun {
	if m != nil {
		return m.TriggeringTest
	}
	return nil
}

func (m *Trigger) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// message to hold the test result
type TestResult struct {
	Marks                uint64            `protobuf:"varint,1,opt,name=marks,proto3" json:"marks,omitempty"`
	MaxMarks             uint64            `protobuf:"varint,2,opt,name=maxMarks,proto3" json:"maxMarks,omitempty"`
	Details              map[string]string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}
func (*TestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7284b2a0aa7b4fec, []int{3}
}

func (m *TestResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResult.Unmarshal(m, b)
}
func (m *TestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResult.Marshal(b, m, deterministic)
}
func (m *TestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult.Merge(m, src)
}
func (m *TestResult) XXX_Size() int {
	return xxx_messageInfo_TestResult.Size(m)
}
func (m *TestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult proto.InternalMessageInfo

func (m *TestResult) GetMarks() uint64 {
	if m != nil {
		return m.Marks
	}
	return 0
}

func (m *TestResult) GetMaxMarks() uint64 {
	if m != nil {
		return m.MaxMarks
	}
	return 0
}

func (m *TestResult) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

// message to hold info about timeouts
type Timeouts struct {
	Init                 string   `protobuf:"bytes,1,opt,name=init,proto3" json:"init,omitempty"`
	Run                  string   `protobuf:"bytes,2,opt,name=run,proto3" json:"run,omitempty"`
	Finish               string   `protobuf:"bytes,3,opt,name=finish,proto3" json:"finish,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timeouts) Reset()         { *m = Timeouts{} }
func (m *Timeouts) String() string { return proto.CompactTextString(m) }
func (*Timeouts) ProtoMessage()    {}
func (*Timeouts) Descriptor() ([]byte, []int) {
	return fileDescriptor_7284b2a0aa7b4fec, []int{4}
}

func (m *Timeouts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timeouts.Unmarshal(m, b)
}
func (m *Timeouts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timeouts.Marshal(b, m, deterministic)
}
func (m *Timeouts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timeouts.Merge(m, src)
}
func (m *Timeouts) XXX_Size() int {
	return xxx_messageInfo_Timeouts.Size(m)
}
func (m *Timeouts) XXX_DiscardUnknown() {
	xxx_messageInfo_Timeouts.DiscardUnknown(m)
}

var xxx_messageInfo_Timeouts proto.InternalMessageInfo

func (m *Timeouts) GetInit() string {
	if m != nil {
		return m.Init
	}
	return ""
}

func (m *Timeouts) GetRun() string {
	if m != nil {
		return m.Run
	}
	return ""
}

func (m *Timeouts) GetFinish() string {
	if m != nil {
		return m.Finish
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_7284b2a0aa7b4fec, []int{5}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SynTestConfig)(nil), "proto.syntest.SynTestConfig")
	proto.RegisterMapType((map[string]string)(nil), "proto.syntest.SynTestConfig.EtcEntry")
	proto.RegisterType((*TestRun)(nil), "proto.syntest.TestRun")
	proto.RegisterMapType((map[string]string)(nil), "proto.syntest.TestRun.DetailsEntry")
	proto.RegisterType((*Trigger)(nil), "proto.syntest.Trigger")
	proto.RegisterType((*TestResult)(nil), "proto.syntest.TestResult")
	proto.RegisterMapType((map[string]string)(nil), "proto.syntest.TestResult.DetailsEntry")
	proto.RegisterType((*Timeouts)(nil), "proto.syntest.Timeouts")
	proto.RegisterType((*Empty)(nil), "proto.syntest.Empty")
}

func init() { proto.RegisterFile("syntest.proto", fileDescriptor_7284b2a0aa7b4fec) }

var fileDescriptor_7284b2a0aa7b4fec = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0x96, 0x73, 0x72, 0x3a, 0x6e, 0xaa, 0x5f, 0xf3, 0x57, 0x65, 0x89, 0x2a, 0x14, 0x85, 0x83,
	0x7a, 0x15, 0x55, 0x29, 0xe2, 0x50, 0x01, 0xaa, 0x80, 0x22, 0x7a, 0x01, 0x54, 0x6e, 0x25, 0x24,
	0xee, 0x8c, 0xbd, 0x35, 0xab, 0xda, 0x6b, 0xcb, 0xbb, 0x46, 0xf8, 0x01, 0x78, 0x00, 0x9e, 0x85,
	0x5b, 0x5e, 0x80, 0xb7, 0x42, 0x3b, 0x6b, 0x27, 0x6e, 0x94, 0x56, 0xe2, 0x82, 0x2b, 0xef, 0x7c,
	0xdf, 0xcc, 0xce, 0xcc, 0x37, 0xb3, 0x86, 0x91, 0xaa, 0xa4, 0xe6, 0x4a, 0xcf, 0xf2, 0x22, 0xd3,
	0x19, 0x8e, 0xe8, 0x33, 0xab, 0xc1, 0xe9, 0xcf, 0x1e, 0x8c, 0xce, 0x2a, 0x79, 0xce, 0x95, 0x7e,
	0x95, 0xc9, 0x0b, 0x11, 0x23, 0x42, 0x4f, 0x06, 0x29, 0x67, 0xce, 0xc4, 0xd9, 0xdb, 0xf0, 0xe9,
	0x8c, 0x77, 0x00, 0xf2, 0xa4, 0x8c, 0x85, 0x7c, 0x6f, 0x98, 0x0e, 0x31, 0x2d, 0x04, 0x27, 0xe0,
	0x45, 0x42, 0xe5, 0x49, 0x50, 0x91, 0x43, 0x97, 0x1c, 0xda, 0x10, 0x79, 0x70, 0x15, 0x16, 0x22,
	0xd7, 0x22, 0x93, 0xac, 0x57, 0x7b, 0x2c, 0x21, 0xdc, 0x85, 0x0d, 0x93, 0x4b, 0xe5, 0x41, 0xc8,
	0x59, 0x9f, 0xf8, 0x25, 0x60, 0x2a, 0x10, 0x69, 0x9e, 0x15, 0x3a, 0x90, 0x21, 0x67, 0x03, 0x5b,
	0xc1, 0x12, 0xc1, 0x1d, 0x18, 0x14, 0x3c, 0xe7, 0x81, 0x66, 0x2e, 0x71, 0xb5, 0x85, 0xf7, 0x60,
	0x14, 0xc4, 0x5c, 0xea, 0x33, 0x9e, 0xf0, 0x50, 0x67, 0x05, 0x1b, 0x12, 0x7d, 0x15, 0x34, 0xb9,
	0x23, 0x9e, 0x73, 0x19, 0xa9, 0x0f, 0x92, 0x6d, 0x4c, 0xba, 0x26, 0xf7, 0x02, 0xc0, 0x03, 0x18,
	0x6a, 0x91, 0xf2, 0xac, 0xd4, 0x8a, 0xc1, 0xc4, 0xd9, 0xf3, 0xe6, 0xb7, 0x66, 0x57, 0x54, 0x9c,
	0x9d, 0xd7, 0xb4, 0xbf, 0x70, 0xc4, 0x7d, 0xf8, 0xdf, 0x0a, 0xe4, 0x73, 0xa5, 0x83, 0x42, 0x9f,
	0x66, 0x89, 0x08, 0x2b, 0xe6, 0x51, 0xfa, 0x75, 0x94, 0x91, 0x28, 0xc9, 0xe2, 0x8f, 0x81, 0xd0,
	0xe6, 0x3a, 0xb6, 0x69, 0x25, 0x6a, 0x41, 0xa6, 0xc9, 0x90, 0x86, 0xc4, 0x46, 0xb6, 0x49, 0x6b,
	0xe1, 0x63, 0xe8, 0x72, 0x1d, 0xb2, 0xad, 0x49, 0x77, 0xcf, 0x9b, 0xdf, 0x5f, 0xa9, 0xed, 0xca,
	0x74, 0x67, 0xc7, 0x3a, 0x3c, 0x96, 0xba, 0xa8, 0x7c, 0x13, 0x31, 0x7e, 0x04, 0xc3, 0x06, 0xc0,
	0xff, 0xa0, 0x7b, 0xc9, 0xab, 0x7a, 0xec, 0xe6, 0x88, 0xdb, 0xd0, 0xff, 0x1a, 0x24, 0x65, 0x33,
	0x70, 0x6b, 0x1c, 0x76, 0x9e, 0x38, 0xd3, 0x1f, 0x5d, 0x70, 0xcd, 0xa5, 0x7e, 0x29, 0x71, 0x0b,
	0x3a, 0x22, 0xaa, 0xc3, 0x3a, 0x22, 0x42, 0x06, 0x2e, 0x89, 0x7b, 0x12, 0xd5, 0x71, 0x8d, 0x69,
	0x54, 0xa6, 0x7e, 0xa9, 0x3d, 0xbb, 0x23, 0x4b, 0xc0, 0xc4, 0x71, 0x19, 0x11, 0x67, 0xb7, 0xa3,
	0x31, 0xf1, 0x19, 0x80, 0x5e, 0x74, 0x40, 0xab, 0xe1, 0xcd, 0x77, 0x6f, 0xea, 0xd2, 0x6f, 0xf9,
	0xe3, 0x3e, 0xb8, 0xba, 0x10, 0x71, 0xcc, 0x0b, 0x5a, 0x1b, 0x6f, 0xbe, 0xb3, 0x3a, 0x3c, 0xcb,
	0xfa, 0x8d, 0x1b, 0x3e, 0xb5, 0xf9, 0x7c, 0xae, 0xca, 0xc4, 0xee, 0x93, 0x37, 0xbf, 0xbd, 0x1a,
	0xb4, 0x70, 0xf0, 0x5b, 0xce, 0xf8, 0x1c, 0xdc, 0x88, 0xeb, 0x40, 0x24, 0x8a, 0x0d, 0x69, 0x1a,
	0x77, 0xd7, 0xc5, 0x95, 0x72, 0xf6, 0xda, 0x7a, 0xd9, 0x59, 0x34, 0x31, 0xe3, 0x43, 0xd8, 0x6c,
	0x13, 0x7f, 0x35, 0x93, 0xef, 0x0e, 0xb8, 0x75, 0x2b, 0x66, 0x95, 0xea, 0x66, 0xce, 0xab, 0xbc,
	0x79, 0xca, 0x6d, 0x08, 0x5f, 0xc0, 0x56, 0x6d, 0x0a, 0x19, 0x9b, 0xa2, 0xe8, 0xc2, 0x35, 0xe2,
	0xd8, 0x7a, 0xfd, 0x15, 0x6f, 0x33, 0xad, 0xa6, 0x51, 0x3b, 0xc9, 0xc6, 0x9c, 0xfe, 0x72, 0x00,
	0x96, 0xea, 0x98, 0x82, 0xd3, 0xa0, 0xb8, 0x54, 0x54, 0x44, 0xcf, 0xb7, 0x06, 0x8e, 0x61, 0x98,
	0x06, 0xdf, 0xde, 0x11, 0xd1, 0x21, 0x62, 0x61, 0xe3, 0x51, 0xfb, 0x6a, 0xa3, 0xe1, 0x83, 0x6b,
	0xb5, 0xff, 0x07, 0x32, 0xbe, 0x85, 0x61, 0xf3, 0x9a, 0xcd, 0xaf, 0x50, 0x48, 0xa1, 0x9b, 0x5f,
	0xa1, 0x39, 0x9b, 0xbb, 0x8a, 0x52, 0xd6, 0x71, 0xe6, 0x68, 0x5e, 0xe5, 0x85, 0x90, 0x42, 0x7d,
	0xa9, 0x95, 0xa8, 0xad, 0xa9, 0x0b, 0xfd, 0xe3, 0x34, 0xd7, 0xd5, 0xfc, 0xb7, 0xb3, 0xf8, 0xc7,
	0x9e, 0xd2, 0xbb, 0xc7, 0x23, 0x80, 0x13, 0x29, 0xb4, 0x08, 0x12, 0xa1, 0x38, 0xde, 0xb8, 0xcb,
	0xe3, 0xed, 0x15, 0x96, 0xee, 0xc4, 0x23, 0xf0, 0x4e, 0x79, 0x71, 0x91, 0x15, 0x29, 0x8d, 0xe3,
	0x9a, 0x9d, 0x1e, 0x5f, 0xbf, 0xb6, 0xf8, 0x10, 0x06, 0x6f, 0xa8, 0x50, 0x5c, 0x9b, 0x61, 0x7d,
	0xde, 0x97, 0xee, 0xa7, 0x3e, 0xc1, 0x9f, 0x07, 0xf4, 0x39, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x13, 0x4e, 0x46, 0x52, 0x5f, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SynTestPluginClient is the client API for SynTestPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynTestPluginClient interface {
	// Called once at the start - for setup
	Initialise(ctx context.Context, in *SynTestConfig, opts ...grpc.CallOption) (*Empty, error)
	// Called periodically or when another test is done - as configured in the synthetic heart config
	// TestRun contains details from another test that the current test might depend on, otherwise empty
	PerformTest(ctx context.Context, in *Trigger, opts ...grpc.CallOption) (*TestResult, error)
	// Called once before the plugin is killed
	Finish(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type synTestPluginClient struct {
	cc *grpc.ClientConn
}

func NewSynTestPluginClient(cc *grpc.ClientConn) SynTestPluginClient {
	return &synTestPluginClient{cc}
}

func (c *synTestPluginClient) Initialise(ctx context.Context, in *SynTestConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.syntest.SynTestPlugin/Initialise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synTestPluginClient) PerformTest(ctx context.Context, in *Trigger, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.cc.Invoke(ctx, "/proto.syntest.SynTestPlugin/PerformTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synTestPluginClient) Finish(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.syntest.SynTestPlugin/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynTestPluginServer is the server API for SynTestPlugin service.
type SynTestPluginServer interface {
	// Called once at the start - for setup
	Initialise(context.Context, *SynTestConfig) (*Empty, error)
	// Called periodically or when another test is done - as configured in the synthetic heart config
	// TestRun contains details from another test that the current test might depend on, otherwise empty
	PerformTest(context.Context, *Trigger) (*TestResult, error)
	// Called once before the plugin is killed
	Finish(context.Context, *Empty) (*Empty, error)
}

// UnimplementedSynTestPluginServer can be embedded to have forward compatible implementations.
type UnimplementedSynTestPluginServer struct {
}

func (*UnimplementedSynTestPluginServer) Initialise(ctx context.Context, req *SynTestConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialise not implemented")
}
func (*UnimplementedSynTestPluginServer) PerformTest(ctx context.Context, req *Trigger) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformTest not implemented")
}
func (*UnimplementedSynTestPluginServer) Finish(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}

func RegisterSynTestPluginServer(s *grpc.Server, srv SynTestPluginServer) {
	s.RegisterService(&_SynTestPlugin_serviceDesc, srv)
}

func _SynTestPlugin_Initialise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynTestConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynTestPluginServer).Initialise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.syntest.SynTestPlugin/Initialise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynTestPluginServer).Initialise(ctx, req.(*SynTestConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynTestPlugin_PerformTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynTestPluginServer).PerformTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.syntest.SynTestPlugin/PerformTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynTestPluginServer).PerformTest(ctx, req.(*Trigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynTestPlugin_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynTestPluginServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.syntest.SynTestPlugin/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynTestPluginServer).Finish(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SynTestPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.syntest.SynTestPlugin",
	HandlerType: (*SynTestPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialise",
			Handler:    _SynTestPlugin_Initialise_Handler,
		},
		{
			MethodName: "PerformTest",
			Handler:    _SynTestPlugin_PerformTest_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _SynTestPlugin_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syntest.proto",
}
