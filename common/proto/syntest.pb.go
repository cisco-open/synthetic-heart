// Copyright 2024 Cisco Systems, Inc. and its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: syntest.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// message to hold the config for a syntest plugin
type SynTestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                  // name of the test (must be unique)
	Version             string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                                                                                            // version of the config (auto-filled by the controller)
	Labels              map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                      // labels from the CRD
	PluginName          string            `protobuf:"bytes,4,opt,name=pluginName,proto3" json:"pluginName,omitempty"`                                                                                                      // which plugin to run
	DisplayName         string            `protobuf:"bytes,5,opt,name=displayName,proto3" json:"displayName,omitempty"`                                                                                                    // user friendly name for the test
	Description         string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                                                                                    // description of the synthetic test
	Namespace           string            `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                                                        // namespace in which the test exists - populated by the controller
	Importance          string            `protobuf:"bytes,8,opt,name=importance,proto3" json:"importance,omitempty"`                                                                                                      // importance of the test (unused currently)
	Repeat              string            `protobuf:"bytes,9,opt,name=repeat,proto3" json:"repeat,omitempty"`                                                                                                              // how often to repeat the test
	NodeSelector        string            `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`                                                                                                 // which node the test should run on - legacy, use podLabelSelector where possible
	PodLabelSelector    map[string]string `protobuf:"bytes,11,rep,name=podLabelSelector,proto3" json:"podLabelSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // which agents to run the test on - must match the labels
	DependsOn           []string          `protobuf:"bytes,12,rep,name=dependsOn,proto3" json:"dependsOn,omitempty"`                                                                                                       // other test(s) which this test is dependant on (local agent only)
	Timeouts            *Timeouts         `protobuf:"bytes,13,opt,name=timeouts,proto3" json:"timeouts,omitempty"`                                                                                                         // timeouts for different functions
	PluginRestartPolicy string            `protobuf:"bytes,14,opt,name=pluginRestartPolicy,proto3" json:"pluginRestartPolicy,omitempty"`                                                                                   // restart policy for plugins
	LogWaitTime         string            `protobuf:"bytes,15,opt,name=logWaitTime,proto3" json:"logWaitTime,omitempty"`                                                                                                   // how long to wait for logs
	Config              string            `protobuf:"bytes,16,opt,name=config,proto3" json:"config,omitempty"`                                                                                                             // can be anything (YAML preferred) - upto the plugin to parse the config
	Runtime             map[string]string `protobuf:"bytes,17,rep,name=runtime,proto3" json:"runtime,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                   // any runtime info - agent auto-fills these
}

func (x *SynTestConfig) Reset() {
	*x = SynTestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syntest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynTestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynTestConfig) ProtoMessage() {}

func (x *SynTestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_syntest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynTestConfig.ProtoReflect.Descriptor instead.
func (*SynTestConfig) Descriptor() ([]byte, []int) {
	return file_syntest_proto_rawDescGZIP(), []int{0}
}

func (x *SynTestConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SynTestConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SynTestConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SynTestConfig) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *SynTestConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SynTestConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SynTestConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SynTestConfig) GetImportance() string {
	if x != nil {
		return x.Importance
	}
	return ""
}

func (x *SynTestConfig) GetRepeat() string {
	if x != nil {
		return x.Repeat
	}
	return ""
}

func (x *SynTestConfig) GetNodeSelector() string {
	if x != nil {
		return x.NodeSelector
	}
	return ""
}

func (x *SynTestConfig) GetPodLabelSelector() map[string]string {
	if x != nil {
		return x.PodLabelSelector
	}
	return nil
}

func (x *SynTestConfig) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *SynTestConfig) GetTimeouts() *Timeouts {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

func (x *SynTestConfig) GetPluginRestartPolicy() string {
	if x != nil {
		return x.PluginRestartPolicy
	}
	return ""
}

func (x *SynTestConfig) GetLogWaitTime() string {
	if x != nil {
		return x.LogWaitTime
	}
	return ""
}

func (x *SynTestConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *SynTestConfig) GetRuntime() map[string]string {
	if x != nil {
		return x.Runtime
	}
	return nil
}

// message to hold info about the test run and how it was run
type TestRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                   // Id of the test run
	AgentId    string            `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`                                                                                         // Id of the agent the test ran in
	StartTime  string            `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                     // Start time in nano seconds
	EndTime    string            `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`                                                                                         // End time in nano seconds
	TestConfig *SynTestConfig    `protobuf:"bytes,5,opt,name=testConfig,proto3" json:"testConfig,omitempty"`                                                                                   // The config of the syn test
	Trigger    *Trigger          `protobuf:"bytes,6,opt,name=trigger,proto3" json:"trigger,omitempty"`                                                                                         // Information about what triggered the test run
	TestResult *TestResult       `protobuf:"bytes,7,opt,name=testResult,proto3" json:"testResult,omitempty"`                                                                                   // The result
	Details    map[string]string `protobuf:"bytes,8,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Any other info
}

func (x *TestRun) Reset() {
	*x = TestRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syntest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRun) ProtoMessage() {}

func (x *TestRun) ProtoReflect() protoreflect.Message {
	mi := &file_syntest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRun.ProtoReflect.Descriptor instead.
func (*TestRun) Descriptor() ([]byte, []int) {
	return file_syntest_proto_rawDescGZIP(), []int{1}
}

func (x *TestRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestRun) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TestRun) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TestRun) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TestRun) GetTestConfig() *SynTestConfig {
	if x != nil {
		return x.TestConfig
	}
	return nil
}

func (x *TestRun) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *TestRun) GetTestResult() *TestResult {
	if x != nil {
		return x.TestResult
	}
	return nil
}

func (x *TestRun) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// message to hold info about what triggered the test run
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType    string   `protobuf:"bytes,1,opt,name=triggerType,proto3" json:"triggerType,omitempty"`
	TriggeringTest *TestRun `protobuf:"bytes,2,opt,name=triggeringTest,proto3" json:"triggeringTest,omitempty"` // Contains the test run that was responsible for triggering test (if triggered by another test)
	Details        string   `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`               // Any useful information
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syntest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_syntest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_syntest_proto_rawDescGZIP(), []int{2}
}

func (x *Trigger) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *Trigger) GetTriggeringTest() *TestRun {
	if x != nil {
		return x.TriggeringTest
	}
	return nil
}

func (x *Trigger) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// message to hold the test result
type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Marks    uint64            `protobuf:"varint,1,opt,name=marks,proto3" json:"marks,omitempty"`
	MaxMarks uint64            `protobuf:"varint,2,opt,name=maxMarks,proto3" json:"maxMarks,omitempty"`
	Details  map[string]string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Tests can add additional details - e.g. targeting specific result handlers
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syntest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_syntest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_syntest_proto_rawDescGZIP(), []int{3}
}

func (x *TestResult) GetMarks() uint64 {
	if x != nil {
		return x.Marks
	}
	return 0
}

func (x *TestResult) GetMaxMarks() uint64 {
	if x != nil {
		return x.MaxMarks
	}
	return 0
}

func (x *TestResult) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// message to hold info about timeouts
type Timeouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init   string `protobuf:"bytes,1,opt,name=init,proto3" json:"init,omitempty"`     // time out plugins to complete init function
	Run    string `protobuf:"bytes,2,opt,name=run,proto3" json:"run,omitempty"`       // time out plugins to complete run/handle/test functions
	Finish string `protobuf:"bytes,3,opt,name=finish,proto3" json:"finish,omitempty"` // time out plugins to complete finish function
}

func (x *Timeouts) Reset() {
	*x = Timeouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syntest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timeouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeouts) ProtoMessage() {}

func (x *Timeouts) ProtoReflect() protoreflect.Message {
	mi := &file_syntest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeouts.ProtoReflect.Descriptor instead.
func (*Timeouts) Descriptor() ([]byte, []int) {
	return file_syntest_proto_rawDescGZIP(), []int{4}
}

func (x *Timeouts) GetInit() string {
	if x != nil {
		return x.Init
	}
	return ""
}

func (x *Timeouts) GetRun() string {
	if x != nil {
		return x.Run
	}
	return ""
}

func (x *Timeouts) GetFinish() string {
	if x != nil {
		return x.Finish
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syntest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_syntest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_syntest_proto_rawDescGZIP(), []int{5}
}

var File_syntest_proto protoreflect.FileDescriptor

var file_syntest_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0xfd,
	0x06, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x79, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5e,
	0x0a, 0x10, 0x70, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x6f,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x33, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x57, 0x61, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x79, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91,
	0x03, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x79, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x08, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x75, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xc9, 0x01, 0x0a,
	0x0d, 0x53, 0x79, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x40,
	0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x79, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syntest_proto_rawDescOnce sync.Once
	file_syntest_proto_rawDescData = file_syntest_proto_rawDesc
)

func file_syntest_proto_rawDescGZIP() []byte {
	file_syntest_proto_rawDescOnce.Do(func() {
		file_syntest_proto_rawDescData = protoimpl.X.CompressGZIP(file_syntest_proto_rawDescData)
	})
	return file_syntest_proto_rawDescData
}

var file_syntest_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_syntest_proto_goTypes = []interface{}{
	(*SynTestConfig)(nil), // 0: proto.syntest.SynTestConfig
	(*TestRun)(nil),       // 1: proto.syntest.TestRun
	(*Trigger)(nil),       // 2: proto.syntest.Trigger
	(*TestResult)(nil),    // 3: proto.syntest.TestResult
	(*Timeouts)(nil),      // 4: proto.syntest.Timeouts
	(*Empty)(nil),         // 5: proto.syntest.Empty
	nil,                   // 6: proto.syntest.SynTestConfig.LabelsEntry
	nil,                   // 7: proto.syntest.SynTestConfig.PodLabelSelectorEntry
	nil,                   // 8: proto.syntest.SynTestConfig.RuntimeEntry
	nil,                   // 9: proto.syntest.TestRun.DetailsEntry
	nil,                   // 10: proto.syntest.TestResult.DetailsEntry
}
var file_syntest_proto_depIdxs = []int32{
	6,  // 0: proto.syntest.SynTestConfig.labels:type_name -> proto.syntest.SynTestConfig.LabelsEntry
	7,  // 1: proto.syntest.SynTestConfig.podLabelSelector:type_name -> proto.syntest.SynTestConfig.PodLabelSelectorEntry
	4,  // 2: proto.syntest.SynTestConfig.timeouts:type_name -> proto.syntest.Timeouts
	8,  // 3: proto.syntest.SynTestConfig.runtime:type_name -> proto.syntest.SynTestConfig.RuntimeEntry
	0,  // 4: proto.syntest.TestRun.testConfig:type_name -> proto.syntest.SynTestConfig
	2,  // 5: proto.syntest.TestRun.trigger:type_name -> proto.syntest.Trigger
	3,  // 6: proto.syntest.TestRun.testResult:type_name -> proto.syntest.TestResult
	9,  // 7: proto.syntest.TestRun.details:type_name -> proto.syntest.TestRun.DetailsEntry
	1,  // 8: proto.syntest.Trigger.triggeringTest:type_name -> proto.syntest.TestRun
	10, // 9: proto.syntest.TestResult.details:type_name -> proto.syntest.TestResult.DetailsEntry
	0,  // 10: proto.syntest.SynTestPlugin.Initialise:input_type -> proto.syntest.SynTestConfig
	2,  // 11: proto.syntest.SynTestPlugin.PerformTest:input_type -> proto.syntest.Trigger
	5,  // 12: proto.syntest.SynTestPlugin.Finish:input_type -> proto.syntest.Empty
	5,  // 13: proto.syntest.SynTestPlugin.Initialise:output_type -> proto.syntest.Empty
	3,  // 14: proto.syntest.SynTestPlugin.PerformTest:output_type -> proto.syntest.TestResult
	5,  // 15: proto.syntest.SynTestPlugin.Finish:output_type -> proto.syntest.Empty
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_syntest_proto_init() }
func file_syntest_proto_init() {
	if File_syntest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_syntest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynTestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syntest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syntest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syntest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syntest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timeouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syntest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syntest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_syntest_proto_goTypes,
		DependencyIndexes: file_syntest_proto_depIdxs,
		MessageInfos:      file_syntest_proto_msgTypes,
	}.Build()
	File_syntest_proto = out.File
	file_syntest_proto_rawDesc = nil
	file_syntest_proto_goTypes = nil
	file_syntest_proto_depIdxs = nil
}
