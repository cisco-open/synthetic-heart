// Copyright 2024 Cisco Systems, Inc. and its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package proto.syntest;
option go_package = "./proto";

// message to hold the config for a syntest plugin
message SynTestConfig {
    string name = 1; // name of the test (must be unique)
    string pluginName = 2; // which plugin to run
    string displayName = 3; // user friendly name for the test
    string description = 4; // description of the synthetic test
    string namespace = 5; // namespace in which the test exists - populated by the controller
    string importance = 6; // importance of the test (unused currently)
    string repeat = 7; // how often to repeat the test
    string nodeSelector = 8; // [Deprecated] which agent the test should run on - Use label selector instead
    map<string, string> podLabelSelector = 9; // which agents to run the test on - must match the labels
    repeated string dependsOn = 10; // other test(s) which this test is dependant on (local agent only)
    Timeouts timeouts = 11; // timeouts for different functions
    string pluginRestartPolicy = 12; // restart policy for plugins
    string logWaitTime = 13; // how long to wait for logs
    string config = 14; // can be anything (YAML preferred) - upto the plugin to parse the config
    map<string, string> runtime = 16; // any runtime info - agent auto-fills these
}

// message to hold info about the test run and how it was run
message TestRun {
    string id = 1; // Id of the test run
    string agentId = 2; // Id of the agent the test ran in
    string startTime = 3; // Start time in nano seconds
    string endTime = 4; // End time in nano seconds
    SynTestConfig testConfig = 5; // The config of the syn test
    Trigger trigger = 6; // Information about what triggered the test run
    TestResult testResult = 7; // The result
    map<string, string> details = 8; // Any other info
}

// message to hold info about what triggered the test run
message Trigger {
    string triggerType = 1;
    TestRun triggeringTest = 2; // Contains the test run that was responsible for triggering test (if triggered by another test)
    string details = 3; // Any useful information
}

// message to hold the test result
message TestResult {
    uint64 marks = 1;
    uint64 maxMarks = 2;
    map<string, string> details = 3; // Tests can add additional details - e.g. targeting specific result handlers
}

// message to hold info about timeouts
message Timeouts {
    string init = 1;    // time out plugins to complete init function
    string run = 2;     // time out plugins to complete run/handle/test functions
    string finish = 3;  // time out plugins to complete finish function
}

message Empty {
}

service SynTestPlugin {
    // Called once at the start - for setup
    rpc Initialise (SynTestConfig) returns (Empty);

    // Called periodically or when another test finishes - as configured in the synthetic test config
    // TestRun contains details from another test that the current test might depend on, otherwise empty
    rpc PerformTest (Trigger) returns (TestResult);

    // Called once before the plugin is killed
    rpc Finish (Empty) returns (Empty);
}